{"ast":null,"code":"import { Component } from \"react\";\nimport axios from 'axios';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'token';\n\nclass JWTService extends Component {\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  loginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, token);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  creteToken() {\n    let jwtToken = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\n    return 'Bearer ' + jwtToken;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      console.log(\"config method has been executed\");\n      return config;\n    });\n  }\n\n}\n\nexport default new JWTService();","map":{"version":3,"sources":["C:/Users/Mehul/Desktop/Frontend in  React with JWT/react-jwt-project/src/Services/AuthenticationServices/JWTService.js"],"names":["Component","axios","USER_NAME_SESSION_ATTRIBUTE_NAME","USER_TOKEN_SESSION_ATTRIBUTE_NAME","JWTService","registerSuccessfulLogin","username","password","sessionStorage","setItem","setupAxiosInterceptors","createBasicAuthToken","loginForJwt","token","createJWTToken","creteToken","jwtToken","getItem","logout","removeItem","isUserLoggedIn","user","getLoggedInUserName","interceptors","request","use","config","headers","authorization","console","log"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;AACP,OAAO,MAAMC,iCAAiC,GAAG,OAA1C;;AAEP,MAAMC,UAAN,SAAyBJ,SAAzB,CACA;AACIK,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuBP,gCAAvB,EAAyDI,QAAzD;AACA,SAAKI,sBAAL,CAA4B,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDK,EAAAA,WAAW,CAACN,QAAD,EAAWO,KAAX,EAAkB;AACzBL,IAAAA,cAAc,CAACC,OAAf,CAAuBP,gCAAvB,EAAyDI,QAAzD;AACAE,IAAAA,cAAc,CAACC,OAAf,CAAuBN,iCAAvB,EAAyDU,KAAzD;AACA,SAAKH,sBAAL,CAA4B,KAAKI,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDE,EAAAA,UAAU,GACV;AACI,QAAIC,QAAQ,GAAGR,cAAc,CAACS,OAAf,CAAuBd,iCAAvB,CAAf;AACA,WAAO,YAAYa,QAAnB;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACLV,IAAAA,cAAc,CAACW,UAAf,CAA0BjB,gCAA1B;AACAM,IAAAA,cAAc,CAACW,UAAf,CAA0BhB,iCAA1B;AACH;;AAEDiB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGb,cAAc,CAACS,OAAf,CAAuBf,gCAAvB,CAAX;AACA,QAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,QAAID,IAAI,GAAGb,cAAc,CAACS,OAAf,CAAuBf,gCAAvB,CAAX;AACA,QAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDX,EAAAA,sBAAsB,CAACG,KAAD,EAAQ;AAE1BZ,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKN,cAAL,EAAJ,EAA2B;AACvBM,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+Bf,KAA/B;AACH;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,aAAOJ,MAAP;AACH,KAPL;AASH;;AAlDL;;AAqDA,eAAe,IAAItB,UAAJ,EAAf","sourcesContent":["import { Component } from \"react\";\r\nimport axios from 'axios';\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\r\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'token'\r\n\r\nclass JWTService extends Component\r\n{  \r\n    registerSuccessfulLogin(username, password) {        \r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n\r\n    loginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME,token)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    creteToken()\r\n    {\r\n        let jwtToken = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME)\r\n        return 'Bearer ' + jwtToken\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                console.log(\"config method has been executed\")\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new JWTService();"]},"metadata":{},"sourceType":"module"}